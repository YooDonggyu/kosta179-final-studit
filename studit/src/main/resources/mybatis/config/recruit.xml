<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="recruit">

	<!--*** resultMap ***-->
	<!-- 
	    findStudyConditionByMemberEmail 쿼리에서 사용하는 resultMap
	    
		@author 변태섭
	 -->
	<resultMap type="studyConditionVO" id="scRM">
		<result property="studyConditionNo" column="condition_no" />
		<result property="recruitPostVO.smallCategoryVO.name" column="sc_name" />
		<result property="recruitPostVO.location" column="location" />
		<result property="recruitPostVO.title" column="title" />
		<result property="memberVO.name" column="member_name" />
		<result property="regdate" column="stc_regdate" />
		<result property="state" column="state" />
		<result property="recruitPostVO.recruitPostNo" column="recruit_post_no" />
	</resultMap>
	
	 <!-- 
		SmallCategoryVO에 값을 담기 위한 resultMap
		@author 김유란
	 -->
	<resultMap type="smallCategoryVO" id="smallCategoryMap">
		<result column="small_category_no" property="smallCategoryNo"/>
		<result column="big_category_no" property="bigCategoryVO.bigCategoryNo"/>
	</resultMap>
	
		<!-- 
			recruitPostVO에 값을 담기 위한 resultMap
			@author 김유란
		 -->
		<resultMap type="recruitPostVO" id="recruitPostMap">
		<result column="member_email" property="memberVO.memberEmail"/>
 		<result column="name" property="memberVO.name"/>
 		<result column="recruit_post_no" property="recruitPostNo"/>
 	</resultMap>
	
	<!--*** /resultMap ***-->
	
	
	
	
	
	<!-- 
      신청한 스터디 중 승인대기중인 스터디 수 조회
      @author 송용준
      @param memberEmail 회원 이메일
      @return string 신청한 스터디 중 승인대기중인 스터디 수
    -->
   <select id="findWaitStudyByEmail" parameterType="string" resultType="string">
      select count(study_condition_no)
      from study_condition
      where member_email=#{value} and state='승인대기중'
   </select>
   
   
	<!-- 
		스터디 현황 조회 시 필요한 데이터를 뽑는다.
		
		@author 변태섭
		@param String 로그인한 회원의 Email
		@return StudyConditionVO resultMap을 이용하여 스터디 현황 조회 시 필요한 데이터 뽑기
	 -->
	<select id="findStudyConditionByMemberEmail" parameterType="object" resultMap="scRM">
		select condition_no, sc_name, location, title, member_name, stc_regdate, state, recruit_post_no
		from
				(select row_number() over(order by study_condition_no desc) condition_no,  sc.name sc_name, rp.location, rp.title,
							m.name member_name, to_char(stc.regdate,'yyyy-MM-dd hh24:mi:ss') stc_regdate, stc.state, rp.recruit_post_no
				from small_category sc, recruit_post rp, member m, study_condition stc
				where stc.member_email = #{memberEmail}
							and sc.small_category_no = rp.small_category_no
							and rp.recruit_post_no = stc.recruit_post_no
							and m.member_email = rp.member_email)
		where condition_no between #{pb.startRowNumber} and #{pb.endRowNumber}
	</select>
	
	<!-- 
		스터디 현황 데이터의 개수를 불어오는 쿼리
		
		@author 변태섭
		@param String 로그인한 회원의 Email
		@return int 스터디 현황 데이터의 개수
	 -->
	<select id="findCountStudyConditionByMemberEmail" parameterType="string" resultType="int">
		select count(*)	
		from study_condition
		where member_email = #{memberEmail}
	</select>
	<!-- 
		스터디 신청을하는 SQL문
		@param Hashmap<Stirng,Object>
		@author 이승수
	 -->
	<insert id="registerRecruitStudy" parameterType="object" >
		insert into study_condition (study_condition_no,regdate,self_appeal,recruit_post_no,member_email)  
		values(study_condition_no_seq.nextval,sysdate,#{context},#{recruitPostNo},#{memberEmail}) 
	</insert> 
	
	<!-- 
		글번호로 스터디그룹멤버를 찾는 메소드.
		@param int recruitPostNo
		@author 이승수
	 -->
	<select id="findGroupMemberByRecruitPostNo" parameterType="int" resultType="groupMemberVO">
		select m.email , m.position , m.state
		from study_group g , sg_member m
		where g.sg_no = m.sg_no and g.sg_no = (select s.sg_no
		from recruit_post r, study_group s 
		where r.recruit_post_no = s.recruit_post_no and r.recruit_post_no=#{value})
	</select>
	<!-- 
		이메일과 게시글번호로 스터디신청 현황을 불러오는 쿼리문.
		@param map
		@author 이승수
	 -->
	<select id="findStudyConditionCountByEmailAndRecruitNo"  resultType="int">
         select count(*)
         from study_condition
         where member_email = #{memberEmail} and recruit_post_no=#{recruitNo}
   </select>
   	<!-- 
		다시 신청했을 때 상태를 거절에서 미승인으로 바꿔주는 SQL문
		@param int recruitPostNo
		@author 이승수
	 -->
   <update id="updateRecruitStudy" parameterType="object">
   		update study_condition set state='미승인', self_appeal=#{context}
   		where recruit_post_no=#{recruitPostNo} and member_email=#{memberEmail}
   </update>
   
  
	
	<!-- 
		대분류 목록을 가져온다.
		@author 김유란
		@return BigCategoryVO
	 -->
	<select id="getBigCategoryList" resultType="bigCategoryVO">
		select big_category_no, name from big_category
	</select>

	<!-- 
		대분류 번호에 따른 소분류 목록을 가져온다.
		@author 김유란
		@return SmallCategoryVO
	 -->
	<select id="findSmallCategoryListByBigCategoryNo" resultMap="smallCategoryMap">
		select s.small_category_no, s.name, b.big_category_no
		from small_category s, big_category b
		where s.big_category_no=b.big_category_no and s.big_category_no=#{value}
	</select>

		<!-- 
		전체 모집글 수를 가져온다. 
		@author 김유란
		@return int
	 -->
 	<select id="getTotalRecruitPostCount" resultType="int">
 	select count(*) from recruit_post where condition='모집중'
 	</select> 
 	
 		<!-- 
		전체 모집글을 페이징 처리하여 가져온다.
		@author 김유란
		@return List<RecruitPostVO> 
	 -->
	<select id="getRecruitPostList" parameterType="pagingBean" resultMap="recruitPostMap">
 	select r.recruit_post_no, r.title, r.regdate, r.location, r.hit, m.name from (
	select recruit_post_no, title, to_char(regdate, 'YYYY.MM.DD') regdate, 
				hit, member_email, location, row_number() over(order by recruit_post_no desc) as rnum 
				from recruit_post where condition='모집중') r, member m
	where r.member_email=m.member_email and rnum between #{startRowNumber} AND #{endRowNumber} 
	ORDER BY r.recruit_post_no DESC
 	</select> 
	
 	<!-- 
		소분류와 키워드로 검색한 모집글 수를 가져온다.
		@author 김유란
		@return int 
	 -->	
	<select id="findRecruitPostCountByCategoryAndKeyword" resultType="int">
	    select count(*) from recruit_post r, member m
		<where>
			r.member_email=m.member_email 
			and r.condition='모집중'
			<if test="category!=null">
			and r.small_category_no in
		 	<foreach collection="category" item="item" index="index"  open="(" separator="," close=")">
			#{item}
			</foreach> 
			</if> 
			<if test="keyword!=null and keyword!=''">
			 and r.title || r.content || r.location like '%' || #{keyword}||'%' 
			</if>
		</where>	
 	</select>	
 	
 	<!-- 
		카테고리와 키워드로 검색한 게시물을 페이징 처리하여 가져온다.
		@author 김유란
		@return List<RecruitPostVO> 
	 -->
	 <select id="findRecruitPostByCategoryAndKeyword" resultMap="recruitPostMap">
		select r.recruit_post_no, r.title, r.regdate, r.member_email, r.location, r.hit, m.name
		from (select recruit_post_no, title, to_char(regdate, 'YYYY.MM.DD') regdate, member_email, hit, location, row_number() over(order by recruit_post_no desc) as rnum from recruit_post
		<where>
		condition='모집중'
		<if test="category!=null">
		and small_category_no in
	 	<foreach collection="category" item="item" index="index"  open="(" separator="," close=")">
		#{item}
		</foreach> 
		</if> 
		<if test="keyword!=null and keyword!=''">
		 and title || content || location like '%' || #{keyword}||'%' 
		</if>
		</where>
		) r, member m
		where
		r.member_email=m.member_email 
		and r.rnum between #{pagingBean.startRowNumber} AND  #{pagingBean.endRowNumber} ORDER BY r.recruit_post_no DESC
	</select> 
	
</mapper>
 
 
 
 