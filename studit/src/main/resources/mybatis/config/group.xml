<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="group">
	<!-- Result Map -->
	<resultMap type="groupMemberVO" id="groupMemberRM">
		<result property="groupVO.groupNo" column="sg_no"/>
		<result property="groupVO.name" column="name"/>
		<result property="groupVO.recruitPostVO.recruitPostNo" column="recruit_post_no"/>
		<result property="groupMemberNo" column="sg_member_no"/>
		<result property="memberVO.memberEmail" column="member_email"/>
		<result property="memberVO.picPath" column="pic_path"/>
		<result property="memberVO.name" column="member_name"/>
	</resultMap>
	
	<resultMap type="groupVO" id="groupRM">
		<result property="recruitPostVO.recruitPostNo" column="recruit_post_no"/>
		<result property="recruitPostVO.condition" column="condition"/>
		<result property="groupNo" column="sg_no"/>
	</resultMap>
	
	<resultMap type="groupPostVO" id="groupPostRM">
		<result property="groupMemberVO.memberVO.memberEmail" column="member_email"/>
		<result property="groupMemberVO.memberVO.name" column="name"/>
	</resultMap>
	
	<resultMap type="groupPostCommentVO" id="groupPostCommentRM">
		<result property="groupMemberVO.memberVO.memberEmail" column="member_email"/>
		<result property="groupMemberVO.memberVO.name" column="name"/>
	</resultMap>
		
	<resultMap type="memoVO" id="memoRM">
		<result property="sgMemoNo" column="sg_memo_no"/>
		<result property="sgNo" column="sg_no"/>
	</resultMap>
	
	<!-- 
		본인이 팀장인 스터디 그룹의 개수 조회
		@author 송용준
		@param memberEmail 회원 이메일
		@return string 본인이 팀장인 스터디 그룹의 개수
	 -->
	<select id="findMyLeadStudyGroupCountByEmail" parameterType="string" resultType="int">
		select count(sg.sg_no)
		from recruit_post rp, study_group sg, sg_member sm
		where rp.member_email=#{value} and rp.recruit_post_no=sg.recruit_post_no and sg.sg_no=sm.sg_no and sm.position='팀장' and sm.member_email=#{value}
	</select>
	
	<!-- 
		본인이 팀장인 스터디 그룹 중 팀원이 있는 그룹 조회
		@author 송용준, 유동규
		@param memberEmail 회원 이메일
		@return string 스터디 그룹 정보. Key : 스터디 그룹 넘버, 그룹 이름
	 -->
	<select id="findMyLeadGroupHasMemberByEmail" parameterType="string" resultType="map">
		select a.sg_no, sg.name
		from (
			select sm1.sg_no as sg_no, count(sm2.member_email) as cnt
			from sg_member sm1, sg_member sm2 
			where sm1.member_email=#{value} 
					and sm1.position='팀장' 
				  	and sm1.sg_no = sm2.sg_no
			group by sm1.sg_no
		) a, RECRUIT_POST rp, study_group sg
		where sg.sg_no = a.sg_no and sg.recruit_post_no = rp.recruit_post_no and a.cnt>1
	</select>
	
	<!-- 
		스터디 그룹 생성 : 모집글 생성 시, 동시에 생성
		@author 송용준
		@param map key : memberName 회원이름 (DEFAULT : 스터디 그룹 이름)
		@param map key : recruitPostNo 매칭되는 모집글 넘버
	 -->
	<insert id="createStudyGroup" parameterType="map">
		insert into study_group(sg_no, name, recruit_post_no)
		values(study_group_seq.nextVal, #{memberName}, #{recruitPostNo})
	</insert>
	
	<!-- 
		스터디 그룹에 스터디 맴버 등록
		@author 송용준, 김유란
		@param map key : memberEmail 회원 이메일
		@param map key : groupPosition 그룹 직책
		@param map key : studyGroupNo 맴버를 추가할 스터디 그룹 넘버
	 -->
	<insert id="registerStudyGroupMember" parameterType="groupMemberVO">
		insert into sg_member(sg_member_no, member_email, position, state, sg_no)
		values(sg_member_seq.nextVal, #{memberVO.memberEmail}, #{position}, 'true',#{groupVO.groupNo}) 
	</insert>
	
	<!-- 
		모집글 넘버에 매칭되는 스터디 그룹 넘버를 조회
		@author 송용준
		@param map recruitPostNo 조회할 스터디 그룹과 매칭되는 모집글 넘버
		@return int 조건에 부합하는 스터디 그룹 넘버
	 -->
	<select id="findStudyGroupNoByRecruitPostNo" parameterType="int" resultType="int">
		select sg_no
		from study_group
		where recruit_post_no=#{value}
	</select>
	
	<!-- 
		회원이 속해있는 스터디 그룹과 본인의 직책 정보를 모두 조회
		@author 김유란
		@param memberEmail 회원 이메일
		@return GroupMemberVO
	 -->
	<select id="findStudyGroupByMemberEmail" resultMap="groupMemberRM">
	select sgm.sg_member_no, sgm.sg_no, sgm.position, sgm.member_email, sgm.state, sg.name, rp.recruit_post_no 
	from sg_member sgm, study_group sg, recruit_post rp 
	where sgm.sg_no=sg.sg_no and rp.recruit_post_no=sg.recruit_post_no and sgm.member_email=#{value} and sgm.position!='탈퇴' and rp.condition!='삭제'
	</select>
	
	<!-- 
	  스터디 그룹 정보를 조회
	 @author 송용준, 김유란
	 @param sgNo 이름을 조회할 스터디 그룹 번호
	 @return GroupVO
 	-->
	<select id="findStudyGroupInfoByStudyGroupNo" parameterType="string" resultMap="groupRM">
		select sg.sg_no, sg.name, rp.recruit_post_no, rp.condition
		from study_group sg, recruit_post rp
		where sg.recruit_post_no=rp.recruit_post_no 
		and sg_no=#{value}
	</select>
	
	<!-- 
	 회원이 가지고 있는 스터디 그룹 내의 직책을 조회 
	 @author 송용준
	 @param sgNo 조회할 스터디 그룹 번호
	 @param memberEmail 직책을 확인할 회원의 이메일
	 @return 회원의 직책
 	-->
	<select id="findMemberPositionByMemberEmailAndStudyGroupNo" parameterType="map" resultType="string" >
		select sm.position
		from sg_member sm, study_group sg
		where sg.sg_no=#{sgNo} and sm.member_email=#{memberEmail} and sm.sg_no=sg.sg_no
	</select>
	
	<!--
		스터디 그룹 번호로 그룹 멤버 수 조회
		@author 김유란
		@param groupNo 그룹 번호
		@return int 멤버 수
	 -->
	<select id="findGroupMemberCountByGroupNo" parameterType="string" resultType="int">
	select count(*)
	from sg_member sgm, study_group sg, member m, member_position mp
	where sgm.sg_no=sg.sg_no and m.member_email=sgm.member_email and sgm.position!='탈퇴'
				and m.member_email=mp.member_email 
				and mp.name!='탈퇴'
				and sgm.sg_no=#{value}
	</select>
	
	<!-- 
		스터디 그룹 번호로 그룹 멤버를 조회
		@author 김유란
		@param map(groupNo, pagingBean)
		@return GroupMemberVO
	 -->
	<select id="findGroupMemberByGroupNo" parameterType="map"  resultMap="groupMemberRM">
	select distinct member_email, member_name, position, sg_no, sg_member_no, pic_path
from(
			select row_number() over(order by position desc) rnum, 
							m.member_email, m.name member_name, m.pic_path, sgm.position, sgm.sg_no, sgm.sg_member_no
							from member m, sg_member sgm, study_group sg, member_position mp
							where sgm.sg_no=sg.sg_no
							and sgm.position!='탈퇴'
							and m.member_email=mp.member_email 
							and mp.name!='탈퇴'
							and sg.sg_no=#{groupNo}
							and m.member_email = sgm.member_email)
where rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} order by position desc, sg_member_no
	</select>
	
	<!-- 
		그룹 멤버 직책 변경
		@author 김유란
		@param map(position: 변경할 직책명 / groupMemberNo: 변경할 그룹 멤버의 식별번호)
	 -->
	<update id="updateGroupMemberPosition"  parameterType="map">
	update sg_member set position=#{position} where sg_member_no=#{groupMemberNo}
	</update>
	
		<!-- 
		그룹 멤버 state(즐겨찾기) 변경
		@author 김유란
		@param map(
		state: true or false 
		/ memberEmail: 멤버의 모든 그룹 상태를 false로 바꿀때 필요 
		/groupMemberNo: 멤버가 선택한 그룹의 상태를 true로 바꿀 때 필요
		)
	 -->
	<update id="updateGroupMemberState" parameterType="map">
	update sg_member set state=#{state} 
		<choose>
			<when test="memberEmail!=null and memberEmail!=''">
			where member_email=#{memberEmail} 
			</when>
			<otherwise>
			where sg_member_no=#{groupMemberNo}
			</otherwise>
		</choose>
	</update>
	
	<!-- 
		스터디 그룹 번호로 승인된 신청자의 신청번호 조회
		@author 김유란
		@param studyConditionNo 스터디 신청 번호
	 -->
	<select id="findConfirmedConditionNoByRecruitPostNo" resultType="string">
		select sc.study_condition_no
		from study_condition sc, recruit_post rp
		where sc.recruit_post_no=rp.recruit_post_no
		and rp.recruit_post_no=#{value} and sc.state='승인'
	</select>
	
	<update id="updateGroupName" parameterType="map">
		update study_group set name=#{name} where sg_no=#{groupNo}
	</update>
	
	
	<!-- 
		스터디 그룹에서 탈퇴
		@author 송용준
		@param memberEmail 회원 이메일
		@param sgNo 탈퇴할 스터디 그룹
	 -->
	<update id="deleteStudyMember">
		update sg_member
		set position='탈퇴'
		where sg_no=#{sgNo} and member_email=#{memberEmail}
	</update>
	
	<!-- 
		스터디 그룹의 총 게시물 수를 조회
		@author 송용준
		@param memberEmail 회원 이메일
		@return string 본인이 팀장인 스터디 그룹의 개수
	 -->
	<select id="findTotalCountOfGroupPost" parameterType="map" resultType="int">
		select count(sp.sg_post_no)
		from sg_post sp, study_group sg, sg_member sm, member m
		<where>
			sp.sg_no=#{sgNo} and sp.sg_no=sg.sg_no and sg.sg_no=sm.sg_no and sp.sg_member_no=sm.sg_member_no and m.member_email=sm.member_email
			<if test="keyword != null and keyword != ''">
				and sp.title || sp.content like '%'||#{keyword}||'%'
			</if>
			<if test="name != null and name != ''">
				and m.name=#{name}
			</if>
		</where>
	</select>
	
	<!-- 
		검색 조건에 맞는 스터디 그룹의 게시물을 페이징 처리하여 조회
		@author 송용준
		@param map 검색 조건&페이징 객체
		@return groupPostVO 페이징 처리된 게시글 리스트
	 -->
	<select id="findGroupPostList" parameterType="map" resultMap="groupPostRM">
		select sp.sg_post_no as groupPostNo, sp.title as title, sp.regdate as regdate, sp.hit as hit, sm.member_email as member_email, m.name as name
		from sg_post sp, sg_member sm, member m, (
			select cc.sg_post_no as sg_post_no, row_number() over(order by cc.sg_post_no desc) as rnum
			from(
				select distinct ssp.sg_post_no as sg_post_no
				from sg_post ssp, study_group sg, sg_member sm, member m
				<where>
					ssp.sg_no=#{sgNo}
					<if test="keyword != null">
						and ssp.title || ssp.content like '%'||#{keyword}||'%'
					</if>
					<if test="name != null">
						and ssp.sg_no=sg.sg_no and sg.sg_no=sm.sg_no and ssp.sg_member_no=sm.sg_member_no and m.member_email=sm.member_email and m.name=#{name}
					</if> 
				</where>
			)cc
		) dc
		where sp.sg_post_no = dc.sg_post_no and sm.sg_member_no = sp.sg_member_no and m.member_email = sm.member_email and dc.rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
		order by sp.regdate desc
	</select>
	
	<!-- 
		스터디 그룹 게시글 상세보기
		@author 송용준
		@param map 스터디 그룹 게시글의 번호
		@return groupPostVO 상세보기 할 게시글
	 -->
	<select id="findGroupBoardDetail" parameterType="string" resultMap="groupPostRM">
		select sp.title as title, sp.content as content, m.name as name, sm.member_email as member_email, sp.regdate as regdate, sp.hit as hit
		from sg_post sp, sg_member sm, member m
		where sp.sg_no=sm.sg_no and sm.member_email=m.member_email and sp.sg_member_no=sm.sg_member_no and sp.sg_post_no=#{value}
	</select>
	
	<!-- 
		스터디 그룹 게시글 수정
		@author 송용준
		@param GroupPostVO 수정할 게시글 정보를 담은 객체
	 -->
	<update id="updateGroupPost" parameterType="groupPostVO">
		update sg_post
		set content=#{content}
		where sg_post_no=#{groupPostNo}
	</update>
	
	<!-- 
		스터디 그룹 맴버의 번호를 조회
		@author 송용준
		@param sgNo 조회할 스터디 그룹 번호
		@param email 조회할 맴버의 이메일
		@return int 맴버의 그룹 맴버 번호
	 -->
	<select id="getGroupMemberNo" parameterType="map" resultType="int">
		select sg_member_no
		from sg_member
		where sg_no=#{sgNo} and member_email=#{email}
	</select>
	
	<!-- 
		스터디 그룹 게시글 작성
		@author 송용준
		@param GroupPostVO DB에 저장할 게시글 정보를 담은 객체
	 -->
	<insert id="createGroupPost" parameterType="groupPostVO">
		<selectKey keyProperty="groupPostNo" resultType="int" order="BEFORE">
			select
			sg_post_seq.nextVal from dual
		</selectKey>
		insert into sg_post(sg_post_no, title, content, sg_member_no, regdate, sg_no)
		values(#{groupPostNo}, #{title}, #{content}, #{groupMemberVO.groupMemberNo}, sysdate, #{groupVO.groupNo})
	</insert>
	
	<!-- 
		스터디 그룹 게시글 삭제
		@author 송용준
		@param string 스터디 그룹 게시글의 번호
	 -->
	<delete id="deleteGroupPost" parameterType="string">
		delete from sg_post
		where sg_post_no=#{value}
	</delete>
	
	<!-- 
		스터디 그룹 게시글의 작성자 조회
		@author 송용준
		@param string 스터디 그룹 게시글의 번호
		@return string 작성자 이메일 
	 -->
	<select id="findGroupPostWriterByGroupPostNo" parameterType="string" resultType="string">
		select sm.member_email
		from sg_post sp, sg_member sm
		where sp.sg_no=sm.sg_no and sp.sg_member_no=sm.sg_member_no and sp.sg_post_no=#{value}
	</select>
	
	<!-- 
		스터디 그룹 게시글 조회수 증가
		@author 송용준
		@param map 스터디 그룹 게시글의 번호
	 -->
	<update id="updateGroupPostHitByGroupPostNo" parameterType="string">
		update sg_post
		set hit=hit+1
		where sg_post_no=#{value}
	</update>
	
	<!-- 
		스터디 그룹 게시글의 댓글 조회
		@author 송용준
		@param map 스터디 그룹 게시글의 번호
		@return GroupPostCommentVO 댓글 정보를 담은 객체
	 -->
	<select id="findGroupPostCommentByGroupPostNo" parameterType="string" resultMap="groupPostCommentRM">
		select sc.sg_comment_no as groupCommentNo, sc.content, to_char(sc.regdate, 'YYYY.MM.DD') as regdate, sm.member_email as member_email, m.name as name
		from sg_post_comment sc, sg_member sm, member m
		where sc.sg_post_no=#{value} and sc.sg_member_no=sm.sg_member_no and sm.member_email=m.member_email
	</select>
	
	<!-- 
		스터디 그룹 게시글에 댓글 작성
		@author 송용준
		@param map 작성할 댓글 정볼르 담은 객체
	 -->
	<insert id="registerGroupPostComment" parameterType="map">
		insert into sg_post_comment(sg_comment_no, content, regdate, sg_post_no, sg_member_no)
		values(sg_post_comment_seq.nextVal, #{comment}, sysdate, #{gpNo}, #{gmNo} )
	</insert>
	
	<!-- 
		스터디 그룹 게시글 댓글 삭제
		@author 송용준
		@param string 스터디 그룹 게시글의 댓글 번호
	 -->
	<delete id="deleteGroupPostCommentByCommentNo" parameterType="string">
		delete from sg_post_comment
		where sg_comment_no=#{value}
	</delete>
	
	<!-- 
		스터디 그룹 게시글 댓글 수정
		@author 송용준
		@param map 수정한 내용을 담은 객체
	 -->
	<update id="updateGroupPostCommentByCommentNo" parameterType="map">
		update sg_post_comment
		set content=#{content}
		where sg_comment_no=#{commentNo}
	</update>
	
	<!-- 
		스터디 그룹의 이름 조회
		@author 송용준
		@param string 스터디 그룹 게시글 번호
		@return 스터디 그룹 이름
	 -->
	<select id="findStudyGroupNameByStudyGroupNo" parameterType="string" resultType="string">
		select name
		from study_group
		where sg_no=#{value}
	</select>
	
	<select id="findPostCountOfMemberByStudyGroup" parameterType="string" resultType="map">
		select distinct sm.member_email as email, cc.post as post, m.name as name, m.pic_path as picpath, sm.position as position
			from study_group sg, sg_member sm, sg_post sp, member m, (
				select count(sg_post_no) as post, sg_member_no as sg_no
				from sg_post
				group by sg_member_no
			)cc
			where sg.sg_no=sm.sg_no and sg.sg_no=sp.sg_no and sm.sg_member_no=sp.sg_member_no 
					and sg.sg_no=#{value} and cc.sg_no=sm.sg_member_no and m.member_email=sm.member_email
			order by cc.post desc
	</select>
	
	<select id="getTotalStudyGroupCount" resultType="int">
		select count(*) from study_group
	</select>
	
	<select id="findStudyGroupLeaderByStudyNo" parameterType="string" resultType="memberVO">
		select sm.member_email as memberEmail, m.name as name
		from sg_member sm, member m
		where sm.sg_no=#{value} and sm.member_email=m.member_email and sm.position='팀장'
	</select>
	
	<select id="getGroupMemberCount" parameterType="string" resultType="groupMemberVO">
		select sg_member_no as groupMemberNo, position
		from sg_member
		where sg_no=#{value}
	</select>

	<!-- 
		스터디 그룹 칸반 메모를 가져오는 쿼리
		@author 변태섭
		@param 스터디 그룹 번호
		@return 메모 데이터 객체
	 -->
	<select id="findStudyGroupMemoByStudyGroupNo" parameterType="int" resultMap="memoRM">
		select sg_memo_no, content, position, color, sg_no
		from sg_memo
		where sg_no = #{value}
	</select>
	
	<!-- 
		스터디 그룹 칸반 메모를 등록하는 쿼리
		@author 변태섭
		@param MemoVO 메모 데이터를 갖고있는 객체
	 -->
	<insert id="registerStudyGroupMemo" parameterType="memoVO">
		insert into sg_memo(sg_memo_no, content, position, color, sg_no)
		values (sg_memo_seq.nextval, #{content}, #{position}, #{color}, ${sgNo})
	</insert>
	
	<!--	
		스터디 그룹 칸반 메모의 위치를 수정하는 쿼리
		@author 변태섭
		@param Map 메모 위치와 메모 번호를 담은 객체 
	 -->
	<update id="updateStudyGroupMemoPosition" parameterType="map">
		update sg_memo set position = #{position} where sg_memo_no = #{memoNo}
	</update>
	
	<!-- 
		스터디 그룹 칸반 메모를 삭제하는 쿼리
		@author 변태섭
	 -->
	<delete id="deleteStudyGroupMemo" parameterType="int">
		delete from sg_memo where sg_memo_no = #{value}
	</delete>
	
	<!-- 
		스터디 그룹 칸반 메모 분류별 개수 구하기
		@author 김유란
	 -->
	<select id="findStudyGroupMemoCountByGroupNo" parameterType="string"  resultType="map">
		select count(decode(position,'todo', 1)) todo, 
					count(decode(position,'doing', 1)) doing, 
					count(decode(position,'done', 1)) done
		from sg_memo
		where sg_no=#{value}
	</select>
</mapper>

