<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	
	<!-- 
		이메일을 통한 회원 객체 검색.
		@author 유동규
		@param memberEmail 검색할 이메일
		@return memberVO 해당 이메일에 대해 값이 있으면 객체를 반환. 없으면 null
	 -->
	<select id="findMemberByEmail" resultType="memberVO">
		select member_email,password, primary_addr, detail_addr, phone, regdate, name, password_hint,password_answer,pic_path 
		from member 
		where member_email = #{value}
	</select>

    <!-- 
    	회원가입 시 입력된 데이터를 member DB에 insert한다.
    	@author 변태섭
    	@param memberVO
     -->
	<insert id="registerMember" parameterType="memberVO">
		insert into member(member_email,password,name,primary_addr, detail_addr,phone,regdate,password_hint,password_answer,pic_path)
		values(#{memberEmail},#{password},#{name},#{primaryAddr},#{detailAddr},#{phone},sysdate,#{passwordHint},#{passwordAnswer},#{picPath})
	</insert>
	
	<!-- 
		@author 김유란, 이승수
		@param memberVO
		@return update 된 memberVO
	 -->
	<update id="updateMember" parameterType="memberVO">
		update member 
		set name=#{name}, primary_addr=#{primaryAddr}, detail_addr=#{detailAddr}, phone=#{phone},password_hint=#{passwordHint}, password_answer=#{passwordAnswer},pic_path=#{picPath} 
		where member_email=#{memberEmail}
	</update>
	
	<!-- 
		사용자의 비밀번호를 업데이트한다.
		@author 김유란
		@param memberVO 사용자 ID와 변경된 비밀번호를 담은 VO
	 -->
	<update id="updatePassword" parameterType="memberVO">
	update member set password=#{password} where member_email=#{memberEmail}
	</update>
	
	<!-- 
		회원의 직책을 DB에 insert한다.
		@author 변태섭
		@param HashMap 사용자 Email과 직책 사용
	 -->
	<insert id="registerMemberPosition" parameterType="string">
		insert into MEMBER_POSITION(member_position_no, name, member_email)
		values (member_position_no_seq.nextval,#{memberPosition},#{memberEmail})
	</insert>
	
	<!-- 
		회원의 직책의 유무를 체크하는 쿼리
		
		@author 변태섭
		@param memberEmail 찾고자 하는 회원의 이메일
		@param memberPosition 찾고자 하는 회원의 직책
	 -->
	<select id="findCountMemberPositionByMemberPositionAndMemberEmail" parameterType="map" resultType="int">
		select count(*) from member_position
		where member_email = #{memberEmail}
		and name = #{memberPosition}
	</select>
	
	<!--
		@author 유동규
		@param memberEmail 회원인지 아닌지 판단할 이메일
		@return count(m.member_email) 0이면 회원 0이 아니면 탈퇴 
 	-->
	 <select id="isMember" resultType="int">
	 	select count(m.member_email) 
		from member m, member_position p
		where m.member_email = p.member_email and m.member_email = #{value} and p.name = '탈퇴'
	 </select>
	 
	 
	 <!-- 
      	회원의 직책이 업체인지 확인
      	@author 송용준
     	@param memberEmail 회원 이메일
      	@return string 업체라면 1, 아니라면 0를 반환
    -->
   <select id="checkCompanyByEmail" parameterType="string" resultType="int">
      select count(mp.member_position_no)
      from member m, member_position mp
      where m.member_email = #{value} and m.member_email=mp.member_email and mp.name='업체'
   </select>
	
	<!-- 
      	탈퇴를 신청한 회원의 직책을 회원->탈퇴 상태로 변경
      	@author 송용준
     	@param memberEmail 탈퇴하고자 하는 회원 이메일
    -->
	<update id="deleteMember" parameterType="string">
		update member_position
		set name='탈퇴'
		where member_email=#{value}
	</update>
	
	<update id="updatePasswordForFindPassword" parameterType="map">
		update member
		set password=#{newPassword}
		where member_email=#{memberEmail}
	</update>
	
	<select id="findPasswordHint" parameterType="string" resultType="string">
		select password_hint
		from member
		where member_email=#{value}
	</select>
	
	<select id="findPasswordAnswer" parameterType="string" resultType="string">
		select password_answer
		from member
		where member_email=#{value}
	</select>
</mapper>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
















