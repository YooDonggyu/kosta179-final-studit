<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="company">

	<!--*** resultMap ***-->
	<resultMap type="companyVO" id="companyMap">
		<result column="member_email" property="memberVO.memberEmail"/>
		<result column="company_no" property="companyNo"/>
		<result column="profile_path" property="profilePath"/>
	</resultMap>
	
	<resultMap type="studyRoomVO" id="studyRoomMap">
		<result column="company_no" property="companyVO.companyNo"/>
		<result column="companyName" property="companyVO.name"/>
		<result column="open" property="companyVO.open"/>
		<result column="close" property="companyVO.close"/>
		<result column="holiday" property="companyVO.holiday"/>
	</resultMap>
	
	<resultMap type="studyRoomConditionVO" id="studyRoomConditionMap">
		<result column="member_email" property="memberVO.memberEmail"/>
		<result column="name" property="memberVO.name"/>
		<result column="phone" property="memberVO.phone"/>
		<result column="studyroom_no" property="studyRoomVO.studyRoomNo"/>
		<result column="roomName" property="studyRoomVO.name"/>
		<result column="capacity" property="studyRoomVO.capacity"/>
		<!-- <result column="studyroom_condition_no" property="studyRoomConditionNo"/> -->
	</resultMap>
	
	<resultMap type="companyVO" id="comMap" extends="companyMap">
		<result column="memberName" property="memberVO.name"/>
	</resultMap>
	
	<resultMap type="companyVO" id="comForMemberRM">
		<result column="member_email" property="memberVO.memberEmail"/>
		<result column="memberName" property="memberVO.name"/>
	</resultMap>
	<!--*** resultMap ***-->
	
	<!-- 
		  회원 이메일로 승인대기중인 예약건수 조회
		 @author 송용준 
		 @param memberEmail 회원 이메일
		 @return string 승인대기중인 예약건수 
	-->
	<select id="findWaitReservationByEmail" resultType="string">
		select count(*)
		from (
				select s.studyroom_no
				from company c, studyroom s
				where c.company_no = s.company_no
				and c.member_email = #{value}
			)st,studyroom_condition sc
		where sc.studyroom_no = st.studyroom_no and sc.state='예약대기' 
	</select>
	
	<!-- 
		 등록이 승인된 스터디 룸의 addr1 값 조회
		 @author 송용준 
		 @return string company 테이블의 addr1 값
	-->
	<select id="readFirstAddr" resultType="string">
		select distinct addr1
		from company
		where state='승인'
	</select>
	
	<!-- 
		 등록이 승인된 업체 목록을 불러온다
		 @author 송용준 
		 @return companyVO 등록이 승인된 업체 객체
	-->
	<select id="readAllCompany" resultType="companyVO">
		select company_no, name, addr1, addr2, addr3, intro, profile_path
		from company
		where state='승인'
		order by regdate desc
	</select>
	
	<!-- 
		 등록이 승인된 업체 목록들의 해쉬태그를 불러온다
		 @author 송용준 
		 @return map 해쉬태그 정보를 담은 map 객체
	-->
	<select id="readAllHashTag" resultType="map">
		select h.content, h.company_no
		from hashtag h, company c
		where c.company_no=h.company_no and c.state='승인'
	</select>
	
	<!-- 
		선택된 addr1을 가진 업체들의 addr2를 불러온다
		 @author 송용준 
		 @return string company 테이블의 addr2 값
	-->
	<select id="findSecondAddressListByFirstAddressName" parameterType="string" resultType="string">
		select distinct addr2
		from company
		where addr1=#{value} and state='승인'
	</select>
	<!-- 
		 선택된 addr2을 가진 업체들의 addr3를 불러온다
		 @author 송용준 
		 @return string company 테이블의 addr3 값
	-->
	<select id="findThirdAddressListBySecondAddressName" parameterType="string" resultType="string">
		select distinct addr3
		from company
		where addr2=#{value} and state='승인'
	</select>
	
	  <!-- 
      회원 이메일로 업체 정보 조회
      @author 김유란
      @param memberEmail 업체로 등록된 회원 이메일
      @return companyVO 
    -->
   <select id="findCompanyByMemberEmail" resultMap="companyMap">
   	select c.company_no, c.name, c.addr1, c.addr2, c.addr3, c.addr4, c.primary_addr, c.detail_addr, 
	c.tel, c.license, c.regdate, c.profile_path, c.intro, c.state, c.open, c.close, c.holiday, c.url, m.member_email
	from company c, member m
	where c.member_email=#{value} and c.member_email=m.member_email 
   </select>
  
   <!-- 
	  업체 번호로 스터디룸 정보 조회
      @author 김유란
      @param companyNo 업체 식별 번호
      @return studyRoomVO
    -->
  <select id="findStudyRoomByCompanyNo" resultMap="studyRoomMap">
  	select s.studyroom_no, s.name, s.capacity, s.price, s.content, c.name as companyName, c.company_no, c.open, c.close, c.holiday
	from studyroom s, company c
	where s.company_no=c.company_no and c.company_no=#{value}
   </select> 
   
   <!-- 
         스터디룸 번호로 특정 월의 스터디룸 예약 현황  조회
      @author 김유란
      @param companyNo 스터디룸 식별 번호
      @return studyRoomConditionVO
    -->
   <select id="findStudyRoomConditionByCompanyNoAndMonth" resultMap="studyRoomConditionMap" parameterType="map">
   	select sc.studyroom_condition_no, sc.member_email, to_char(sc.use_date, 'YYYY-MM-DD') use_date, 
   				sc.start_time, sc.end_time, sc.state, s.studyroom_no, s.name as roomName, m.name, m.phone
	from studyroom s, studyroom_condition sc, member m
	where s.studyroom_no=sc.studyroom_no and m.member_email=sc.member_email and s.company_no=#{companyNo} 
		and use_date between to_date(#{startDate}, 'YYYY-MM-DD') and to_date(#{endDate}, 'YYYY-MM-DD')  order by sc.use_date,  sc.start_time, sc.end_time
   </select>
   

	<!-- 
		스터디룸 예약 현황  수정
		@author 김유란
		@param studyRoomConditionVO 수정된 정보를 담은 VO(현재는 상태 수정만 가능)
    -->
	<update id="updatStudyRoomCondition" parameterType="studyRoomConditionVO">
		update studyroom_condition 
		set state=#{state}
		where studyroom_condition_no=#{studyRoomConditionNo} 
	</update>
	
	<!-- 
		업체 영업일 조회
		@author 김유란
    -->
	<select id="findBusinessDayByCompanyNo" resultType="string">
		select day from com_business_day where company_no=#{value}
	</select>
	
	<!-- 
		검색 조건으로 업체 조회 
		@author 송용준
		@param 검색 조건과 pagingBean
    -->
	<select id="findCompanyListByCondition" parameterType="map" resultType="companyVO">
		select com.company_no, com.name, com.addr1, com.addr2, com.addr3, com.intro, com.profile_path 
		from company com, (
			select cc.company_no as company_no, row_number() over(order by cc.company_no desc) as rnum
			from(
				select distinct c.company_no as company_no
				from company c, hashtag h
				<where>
					 c.state='승인'
					<if test="firstAddr != null">
						and c.addr1=#{firstAddr}
					</if>
					<if test="secondAddr != null">
						and c.addr2=#{secondAddr}
					</if>
					<if test="thirdAddr != null">
						and c.addr3=#{thirdAddr}
					</if>
					<if test="keywordORhashtag != null">
						and c.company_no=h.company_no and c.name || h.content like '%'||#{keywordORhashtag}||'%'
					</if> 
				</where>
			)cc
		) dc
		where com.company_no = dc.company_no and dc.rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} 
		order by com.regdate desc
		
	</select>
	
   <!-- 
		업체 등록 시 등록되는 해시태그들을 insert하는 쿼리
		@author 변태섭
		@param map 입력된 해시태그와 해당 업체 번호
    -->
   <insert id="registerHashtag" parameterType="map" >
   		insert into hashtag(hashtag_no, content, company_no)
   		values(hashtag_seq.nextval, #{tag}, #{companyNo})
   </insert>
   
   
   <!-- 
   		업체 등록 시 등록되는 영업 요일을 insert하는 쿼리
   		@author 변태섭
   		@param map 입력된 요일과 해당 업체 번호
    -->
   <insert id="registerBusinessDay" parameterType="map">
   		insert into com_business_day(com_day_no, day, company_no)
   		values(com_business_day_seq.nextval, #{day}, #{companyNo})
   </insert>
   
   <!-- 
   		업체 등록 시 입력된 업체 데이터를 insert하는 쿼리
   		
   		@author 변태섭
   		@param CompanyVO 업체 정보와 해당 회원의 이메일이 담긴 객체
    -->
   <insert id="registerCompany" parameterType="companyVO">
   		<selectKey keyProperty="companyNo" resultType="int" order="BEFORE">
					select
					company_no_seq.nextval from dual
		</selectKey>
   		insert into company(company_no, name, addr1, addr2, addr3, addr4, primary_addr, detail_addr, tel, license, regdate, profile_path, 
   						  intro, state, open, close, holiday, hit, url, member_email) 
		values (#{companyNo}, #{name}, #{addr1}, #{addr2}, #{addr3}, #{addr4}, 	#{primaryAddr}, #{detailAddr}, #{tel}, #{license}, 
					sysdate, #{profilePath}, #{intro}, '예약대기', #{open}, #{close}, #{holiday}, 0, #{url}, #{memberVO.memberEmail}
					)
   </insert>
   
   <!-- 
   		업체 등록 시 업로드 된 사진들의 경로를 테이블에 insert하는 쿼리
   		@author 변태섭
   		@param Map 사진들의 경로와 업체 번호를 담은 객체
    -->
   <insert id="registerCompanyPicPath" parameterType="map">
   		insert into com_pic(com_pic_no, path, company_no) 
   		values (com_pic_no_seq.nextval, #{companyPicPath},#{companyNo})
   </insert>
   
   <!-- 
   		사업자 등록 번호 중복 체크를 위해 Count를 받아오는 쿼리
   		@author 변태섭
   		@param string 입련된 사업자등록번호
   		@return int 있으면 1, 없으면 0
    -->
   <select id="findCountCompanyByLicense" parameterType="string" resultType="int">
   		select count(*) from company where license = #{value}
   </select>
   
   <select id="findTotalCountOfCompany" resultType="int" parameterType="map">
   		select count(distinct c.company_no)
   		from company c, hashtag h
   		<where>
			 c.state='승인'
			<if test="firstAddr != null">
				and c.addr1=#{firstAddr}
			</if>
			<if test="secondAddr != null">
				and c.addr2=#{secondAddr}
			</if>
			<if test="thirdAddr != null">
				and c.addr3=#{thirdAddr}
			</if>
			<if test="keywordORhashtag != null">
				and c.company_no=h.company_no and c.name || h.content like '%'||#{keywordORhashtag}||'%'
			</if> 
		</where>
   </select>
   
   
   
   
   <!-- 
   		업체 번호에 따른 업체 정보 반환
   		@author 유동규
    -->
   <select id="findCompanyByCompanyNo" resultMap="comMap">
		select c.company_no, c.name, c.addr1, c.addr2, c.addr3, c.addr4, c.primary_addr, c.detail_addr, c.tel, c.license
				, to_char(c.regdate, 'YYYY-MM-DD') as regdate, c.profile_path, c.intro, c.state, c.open, c.close
				, c.holiday, c.hit, c.url, m.member_email, m.name as memberName
		from company c, member m
		where company_no = #{value} and c.member_email = m.member_email  
   </select>
   
   <!--
   		업체 번호에 따른 업체 사진 경로 반환
   		@author 유동규
    -->
    <select id="findComPicByCompanyNo" resultType="map">
    	select com_pic_no, path, company_no
    	from com_pic
    	where company_no = #{value}
    </select>
	
	
	<!-- 
		업체 번호에 따른 해시태그 가져오기
		@author 유동규
	 -->
	 <select id="findHashTagByCompanyNo" resultType="map">
	 	select hashtag_no, content, company_no
	 	from hashtag
    	where company_no = #{value}
	 </select>
	 
 	 <!-- 
		스터디룸 예약 현황 월별 건수 조회
		@author 김유란
	 -->
	 <select id="findStudyRoomConditionCountByMonth" resultType="map" parameterType="map">
	 	select to_char(use_date, 'YYYY-MM') m, count(*) count 
		from (
			select s.studyroom_no, sc.use_date, sc.state
			from studyroom s, company c, studyroom_condition sc
			where s.company_no=c.company_no and s.studyroom_no=sc.studyroom_no 
			and sc.state=#{state}
			and c.company_no =#{companyNo}
			)
		group by to_char(use_date, 'YYYY-MM')
	 </select>
	 
	 <!-- 
		스터디룸 예약대기 전체 내역(일별 건수) 조회
		@author 김유란
	 -->
	 <select id="findWaitStudyRoomConditionCountByCompanyNo" resultType="map" parameterType="string">
	 select to_char(use_date, 'YYYY-MM-DD') m, count(*) count 
		from (
			select s.studyroom_no, sc.use_date, sc.state
			from studyroom s, company c, studyroom_condition sc
			where s.company_no=c.company_no and s.studyroom_no=sc.studyroom_no 
			and sc.state='예약대기'
			and c.company_no =#{companyNo}
			)
		group by to_char(use_date, 'YYYY-MM-DD') order by to_char(use_date, 'YYYY-MM-DD')
	 </select>
	 
	 <!-- 
	 	업체의 회원 아이디 찾기(조회수 증가 판단을 위함)
	 	@author 유동규
	  -->
	  <select id="findCompanyMemberEmailByCompanyNO" resultType="string">
			select m.name
			from company c, member m
			where c.member_email = m.member_email
						and c.company_no = #{value}
	  </select>
	 
	 <!-- 
	 	조회수 증가
	 	@author 유동규
	  -->
	  <update id="updateCompanyHit">
		update company
		set hit = hit +1
		where company_no = #{value}
	  </update>
	 
 	<!-- 
		조회수가 가장 높은 업체 3곳 조회
		@author 유동규
	 -->
	<select id="getTopThreeComapny" resultType="companyVO">
		select c.company_no, c.name, c.primary_addr, c.detail_addr, c.intro, c.profile_path
		  			, h.hit, h.rnum
		from (
					select company_no, hit
							, rank() over(order by hit desc) as rnum
					from company
				)h, company c
		where h.company_no = c.company_no
				   and rnum between 1 and 3
		order by rnum 
	</select>
   	
   	<!-- 
   		회원 이메일로 해시태그를 가져오는 쿼리
   		@author 변태섭
   		@param 회원 이메일
   		@return 해시태그 content, company_no
   	 -->
   	<select id="findHashTagByMemberEmail" parameterType="string" resultType="map">
   		select h.content, h.company_no cno
		from hashtag h, member m, company c
		where h.company_no = c.company_no
					and c.member_email = m.member_email
					and m.member_email = #{value}
   	</select>
   	
   	<!-- 
   		회원 이메일로 업체요일들을 받아오는 쿼리
   		@author 변태섭
   		@param 회원 이메일
   		@return 해당 회원이 보유한 업체들의 영업요일
   	 -->
   	<select id="findDaysByMemberEmail" parameterType="string" resultType="map">
   		select d.day, d.company_no cno
		from COM_BUSINESS_DAY d, COMPANY c, MEMBER m
		where d.company_no = c.company_no
					and c.member_email = m.member_email
					and m.member_email = #{value}
   	</select>
   	
   	<!-- 
   		회원 이메일로 업체 사진(대표사진X)들의 경로를 받아오는 쿼리
   		@author 변태섭
   		@param 회원 이메일
   		@return List 해당 회원이 보유한 업체의 업체사진 경로들을 담은 List 객체
   	 -->
   	<select id="findCompanyPicPathByMemberEmail" parameterType="string" resultType="map">
   		select cp.path, cp.company_no cno
		from com_pic cp, company c, member m
		where cp.company_no = c.company_no
					and c.member_email = m.member_email
					and m.member_email = #{value}
   	</select>
   	
   	<!-- 
   		업체 정보를 수정하는 쿼리
   		@author 변태섭
   		@param CompanyVO 입력된 업체 정보
   	 -->
   	<update id="updateCompany" parameterType="companyVO">
   		update company
		set name= #{name}, addr1 = #{addr1}, addr2 = #{addr2}, addr3 = #{addr3}, addr4 = #{addr4}
			  , primary_addr = #{primaryAddr}, detail_addr = #{detailAddr}
			  , tel = #{tel}, intro = #{intro}, open = #{open}, close = #{close}, holiday = #{holiday}, url = #{url}
		where company_no = #{companyNo}
   	</update>
   	
   	<!-- 
   		업체 프로필을 수정하는 쿼리
   		@author 변태섭
   		@param CompanyVO 입력된 업체 정보
   	 -->
   	<update id="updateCompanyProfilePath" parameterType="companyVO">
   		update company
		set profile_path = #{profilePath}
		where company_no = #{companyNo}
   	</update>
   	
   	<!-- 
   		업체 해시태그를 삭제하는 쿼리
   		@author 변태섭
   		@param 업체 번호
   	 -->
   	<delete id="deleteHashtagByCompanyNo" parameterType="int">
   		delete from hashtag where company_no = #{value}
   	</delete>
   	
   	<!-- 
   		업체 영업요일을 삭제하는 쿼리
   		@author 변태섭
   		@param 업체 번호
   	 -->
   	<delete id="deleteCompanyBusinessDayByCompanyNo" parameterType="int">
   		delete from com_business_day where company_no = #{value}
   	</delete>
	
	 <!-- 
	 	업체 대기 상태 조회 - 관리자용
	 	@author 유동규
	  -->
	  <select id="getCompanyListForAdmin" resultMap="comForMemberRM">
	 	select *
	 	from(
	 				select c.company_no, c.name, c.primary_addr, c.detail_addr, c.tel, c.license, c.regdate, c.state
	 						  , m.member_email, m.name as memberName
	 						  , row_number() over(order by c.company_no desc) as rnum
	 				from company c, member m
	 				<where>
					 	c.member_email = m.member_email
					 	<if test="comSrch != null">
					 		and c.name || c.state like '%' || #{comSrch} || '%'
					 	</if> 
	 				</where>
	 			) 
	 	where  rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
	  </select>
   
   <!-- 
   		관리자용 - 전체 업체 수 가져오기
   		@author 유동규
    -->
    <select id="getTotalCompanyCount" resultType="int">
    	select count(*)
    	from company
		<where>
		 	<if test="_parameter != null">
		 		and name || state like '%' || #{value} || '%'
		 	</if> 
		</where>
    </select>
    
    <!-- 
    	관리자용 - 업체 상태 변경
    	@author 유동규
     -->
    <update id="updateCompanyCondition">
    	update company
    	set state = #{state}
    	where company_no = #{companyNo}
    </update>
</mapper>
 
 
 
 
 
 
 
 
 
 
 
