<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<!-- 어노테이션 기반 springmvc 설정 -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<!-- @ResponseBody로 String 처리할때 한글처리 -->
			<bean
				class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- viewResolver : 클라이언트에게 어떻게 응답할 지에 대한 방식을 제공한다 InternalResourceViewResolver는 
		jsp를 응답하게 하고 TilesViewResolver는 자동화된 jsp include 탬플릿을 이용해 응답하기 위한 ViewResolver이다 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1" />
	</bean>

<!-- TilesViewResolver 설정
	  : 일반 JSP 응답이 아니라 Tiles Layout이 적용된 화면으로 응답하기 위해 설정 
	  order를 0으로 설정하여 viewName을 이용하여 응답할 시에는 가장 먼저 타일즈 뷰 정보를 확인해 없으면 기존 jsp를 응답하는
	  InternalResourceViewResolver가 실행되도록 한다	
 -->
 <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
 	<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
 	<property name="order" value="0"/>
 </bean>
<!--  Tiles Framework 설정
	   : spring framework에서 Tiles Config xml 을 로딩하기 위한 설정 
 -->
 <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
 	<property name="definitions">
 		<list>
 			<value>/WEB-INF/tiles-config.xml</value>
 		</list>
 	</property>
 </bean>
 <!-- Handler Interceptor 설정
	mapping path : 인터셉터 적용할 url 명시 (반드시 /필요)
	<mvc:mapping path="/**/*"/>
	** : directory, sub directory까지 포함, 0개 이상의 디렉토리와 파일 매칭
	* : 0개 이상의 문자와 매칭
	<mvc:exclude-mapping path="/user_*"/>
	user_* : user_요청 url로 요청하면 핸들러 인터셉터 적용 대상에서 제외
 -->
<mvc:interceptors>
	<mvc:interceptor>
		<!-- 
		<mvc:mapping path="/cafe.do"/>
		<mvc:mapping path="/updateMemberForm.do"/> 
		-->
		<mvc:mapping path="/**/*"/>
		<mvc:exclude-mapping path="/*"/>
		<mvc:exclude-mapping path="/resources/**"/>
		<mvc:exclude-mapping path="/ajax/findCheckByEmail"/>
		<mvc:exclude-mapping path="/ajax/getSmallCategoryList"/>
		<mvc:exclude-mapping path="/ajax/findRecruitPostByCategoryAndKeyword" />
		<mvc:exclude-mapping path="/member/login"/>
		<mvc:exclude-mapping path="/member/registerMember"/>
		<mvc:exclude-mapping path="/recruit/getRecruitPostList" />
		<mvc:exclude-mapping path="/company/findCompanyView" />
		<bean class="org.kosta.studit.controller.SessionCheckInterceptor"/>
	</mvc:interceptor>
</mvc:interceptors>

	<!-- DispatcherServlet의 url pattern 이 *.do 에서 / 로 변경된 상태에서 정적 파일(img ,css 
		,js ) 를 서비스하기 위한 설정 -->
	<mvc:resources mapping="/resources/**"
		location="/resources/" />
		
	<!-- 파일 업로드를 위한 multipartResolver 설정 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</bean>
</beans>


